include "list.min"
include "union.min"
include "symbol/core.txt"

record eq_entity {
	proc terms {
		return goproc array as goproc linear_children as this(0)
	}

	proc factors {
		return goproc array as goproc linear_children as this(2)
	}
}

record eq_leaf {
	proc linear_children(op_rec) {
		set list to new list
		goproc push_back as list(this)
		return list
	}
}

record eq_node {
	proc sort_comp(eq_entity, level) {
		if !extern implements(eq_entity, #eq_node) {
			return false
		}

		if level == 3 and extern implements(eq_entity, #eq_bin_op) and extern implements(this, #eq_bin_op) {
			return eq_entity.op_prec - (eq_entity.op_prec % 2) == this.op_prec - (this.op_prec % 2)
		}
		if level == 2 and extern typeof(this) == extern typeof(eq_entity) {
			return true
		}

		set same to 0
		set i to extern len(eq_entity.children)
		while dec i {
			if goproc sort_comp as this.children[i](eq_entity.children[i], level) {
				inc same
			}
		}

		if level > 1 {
			return same >= 1
		}
		else {
			return same == extern len(this.children)
		}
	}
}

record eq_bin_op {
	proc linear_children(op_prec) {
		set list to new list
		if this.op_prec - (this.op_prec % 2) == op_prec - (op_prec % 2) {
			goproc push_range as list(goproc linear_children as this.left(op_prec))
			goproc push_range as list(goproc linear_children as this.right(op_prec))
		}
		else {
			goproc push_back as list(this)
		}
		return list
	}	
}

record op_uni_op {
	proc linear_children(op_rec) {
		set list to new list
		goproc push_back as list(this)
		return list
	}
}

record eq_num {
	proc sort_comp(eq_entity, level) {
		if extern typeof(eq_entity) != extern typeof(this) {
			return false
		}
		if level == 3 {
			return true
		}
		return this.obj == eq_entity.obj
	}
}

record eq_var {
	proc sort_comp(eq_entity, level) {
		if extern typeof(eq_entity) != extern typeof(this) {
			return false
		}
		return this.obj == eq_entity.obj
	}
}

proc sort_terms(terms, level) {
	set union to new union(extern len(terms))

	set i to extern len(terms)
	while dec i {
		goproc insert as union(i)
		set j to extern len(terms)
		while dec j {
			if i != j and goproc sort_comp as terms[i](terms[j], level) {
				goproc unite as union(i, j)
			}
		}
	}

	set roots to goproc roots as union

	set list to new list

	set i to extern len(roots)

	while dec i {
		set children_i to goproc children as union(roots[i])
		set j to extern len(children_i)
		set children to alloc[j]

		while dec j {
			set children[j] to terms[children_i[j]]
		}

		if level {
			goproc push_back as list(goproc sort_terms(children, level - 1))
		}
		else {
			set j to extern len(children)
			while dec j {
				goproc push_back as list(children[j])
			}
		}
	}
	return goproc multi_hang(goproc array as list)
}	

proc multi_hang(terms, offset, length) {
	if !length {
		return null
	}
	elif length == 1 {
		return terms[offset]
	}
	elif length == 2 {
		return new eq_op_add(terms[offset], terms[offset + 1])
	}
	set mid to extern floor(length / 2)
	return new eq_op_add(goproc multi_hang(terms, 0, mid),
				goproc multi_hang(terms, mid, length - mid))
}

proc multi_hang(terms) {
	return goproc multi_hang(terms, 0, extern len(terms))
}